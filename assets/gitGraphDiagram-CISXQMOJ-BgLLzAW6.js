import{c as J}from"./chunk-4KE642ED-Dd3_1b5e.js";import{p as Q}from"./treemap-KMMF4GRG-DK74C3S3-DsfA-3sF.js";import{s as Z}from"./chunk-VSLJSFIP-X76B0Ozx.js";import{m as d,j as tt,$ as et,U as rt,G as at,H as it,N as ot,p as u,u as nt,i as st,b as ct,X as ht,P as dt,n as C,L as mt,h as lt,k as $t,w as gt}from"./mermaid.esm.min-LsE-h16m.js";import"./chunk-5ZJXQJOJ-DDvnq3d5.js";import"./app-B6t5pOtY.js";var p={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},yt=$t.gitGraph,I=d(()=>mt({...yt,...lt().gitGraph}),"getConfig"),c=new Z(()=>{let e=I(),t=e.mainBranchName,a=e.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:a}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}});function S(){return gt({length:7})}d(S,"getID");function K(e,t){let a=Object.create(null);return e.reduce((o,r)=>{let i=t(r);return a[i]||(a[i]=!0,o.push(r)),o},[])}d(K,"uniqBy");var pt=d(function(e){c.records.direction=e},"setDirection"),xt=d(function(e){u.debug("options str",e),e=e==null?void 0:e.trim(),e=e||"{}";try{c.records.options=JSON.parse(e)}catch(t){u.error("error while parsing gitGraph options",t.message)}},"setOptions"),ft=d(function(){return c.records.options},"getOptions"),ut=d(function(e){let t=e.msg,a=e.id,o=e.type,r=e.tags;u.info("commit",t,a,o,r),u.debug("Entering commit:",t,a,o,r);let i=I();a=C.sanitizeText(a,i),t=C.sanitizeText(t,i),r=r==null?void 0:r.map(n=>C.sanitizeText(n,i));let s={id:a||c.records.seq+"-"+S(),message:t,seq:c.records.seq++,type:o??p.NORMAL,tags:r??[],parents:c.records.head==null?[]:[c.records.head.id],branch:c.records.currBranch};c.records.head=s,u.info("main branch",i.mainBranchName),c.records.commits.has(s.id)&&u.warn(`Commit ID ${s.id} already exists`),c.records.commits.set(s.id,s),c.records.branches.set(c.records.currBranch,s.id),u.debug("in pushCommit "+s.id)},"commit"),bt=d(function(e){let t=e.name,a=e.order;if(t=C.sanitizeText(t,I()),c.records.branches.has(t))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);c.records.branches.set(t,c.records.head!=null?c.records.head.id:null),c.records.branchConfig.set(t,{name:t,order:a}),U(t),u.debug("in createBranch")},"branch"),wt=d(e=>{let t=e.branch,a=e.id,o=e.type,r=e.tags,i=I();t=C.sanitizeText(t,i),a&&(a=C.sanitizeText(a,i));let s=c.records.branches.get(c.records.currBranch),n=c.records.branches.get(t),m=s?c.records.commits.get(s):void 0,$=n?c.records.commits.get(n):void 0;if(m&&$&&m.branch===t)throw new Error(`Cannot merge branch '${t}' into itself.`);if(c.records.currBranch===t){let h=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw h.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},h}if(m===void 0||!m){let h=new Error(`Incorrect usage of "merge". Current branch (${c.records.currBranch})has no commits`);throw h.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},h}if(!c.records.branches.has(t)){let h=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw h.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},h}if($===void 0||!$){let h=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw h.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},h}if(m===$){let h=new Error('Incorrect usage of "merge". Both branches have same head');throw h.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},h}if(a&&c.records.commits.has(a)){let h=new Error('Incorrect usage of "merge". Commit with id:'+a+" already exists, use different custom id");throw h.hash={text:`merge ${t} ${a} ${o} ${r==null?void 0:r.join(" ")}`,token:`merge ${t} ${a} ${o} ${r==null?void 0:r.join(" ")}`,expected:[`merge ${t} ${a}_UNIQUE ${o} ${r==null?void 0:r.join(" ")}`]},h}let l=n||"",g={id:a||`${c.records.seq}-${S()}`,message:`merged branch ${t} into ${c.records.currBranch}`,seq:c.records.seq++,parents:c.records.head==null?[]:[c.records.head.id,l],branch:c.records.currBranch,type:p.MERGE,customType:o,customId:!!a,tags:r??[]};c.records.head=g,c.records.commits.set(g.id,g),c.records.branches.set(c.records.currBranch,g.id),u.debug(c.records.branches),u.debug("in mergeBranch")},"merge"),Bt=d(function(e){let t=e.id,a=e.targetId,o=e.tags,r=e.parent;u.debug("Entering cherryPick:",t,a,o);let i=I();if(t=C.sanitizeText(t,i),a=C.sanitizeText(a,i),o=o==null?void 0:o.map(m=>C.sanitizeText(m,i)),r=C.sanitizeText(r,i),!t||!c.records.commits.has(t)){let m=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw m.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},m}let s=c.records.commits.get(t);if(s===void 0||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(r&&!(Array.isArray(s.parents)&&s.parents.includes(r)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let n=s.branch;if(s.type===p.MERGE&&!r)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!a||!c.records.commits.has(a)){if(n===c.records.currBranch){let g=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw g.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},g}let m=c.records.branches.get(c.records.currBranch);if(m===void 0||!m){let g=new Error(`Incorrect usage of "cherry-pick". Current branch (${c.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},g}let $=c.records.commits.get(m);if($===void 0||!$){let g=new Error(`Incorrect usage of "cherry-pick". Current branch (${c.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},g}let l={id:c.records.seq+"-"+S(),message:`cherry-picked ${s==null?void 0:s.message} into ${c.records.currBranch}`,seq:c.records.seq++,parents:c.records.head==null?[]:[c.records.head.id,s.id],branch:c.records.currBranch,type:p.CHERRY_PICK,tags:o?o.filter(Boolean):[`cherry-pick:${s.id}${s.type===p.MERGE?`|parent:${r}`:""}`]};c.records.head=l,c.records.commits.set(l.id,l),c.records.branches.set(c.records.currBranch,l.id),u.debug(c.records.branches),u.debug("in cherryPick")}},"cherryPick"),U=d(function(e){if(e=C.sanitizeText(e,I()),c.records.branches.has(e)){c.records.currBranch=e;let t=c.records.branches.get(c.records.currBranch);t===void 0||!t?c.records.head=null:c.records.head=c.records.commits.get(t)??null}else{let t=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${e}")`);throw t.hash={text:`checkout ${e}`,token:`checkout ${e}`,expected:[`branch ${e}`]},t}},"checkout");function N(e,t,a){let o=e.indexOf(t);o===-1?e.push(a):e.splice(o,1,a)}d(N,"upsert");function j(e){let t=e.reduce((r,i)=>r.seq>i.seq?r:i,e[0]),a="";e.forEach(function(r){r===t?a+="	*":a+="	|"});let o=[a,t.id,t.seq];for(let r in c.records.branches)c.records.branches.get(r)===t.id&&o.push(r);if(u.debug(o.join(" ")),t.parents&&t.parents.length==2&&t.parents[0]&&t.parents[1]){let r=c.records.commits.get(t.parents[0]);N(e,t,r),t.parents[1]&&e.push(c.records.commits.get(t.parents[1]))}else{if(t.parents.length==0)return;if(t.parents[0]){let r=c.records.commits.get(t.parents[0]);N(e,t,r)}}e=K(e,r=>r.id),j(e)}d(j,"prettyPrintCommitHistory");var Et=d(function(){u.debug(c.records.commits);let e=_()[0];j([e])},"prettyPrint"),kt=d(function(){c.reset(),dt()},"clear"),Ct=d(function(){return[...c.records.branchConfig.values()].map((e,t)=>e.order!==null&&e.order!==void 0?e:{...e,order:parseFloat(`0.${t}`)}).sort((e,t)=>(e.order??0)-(t.order??0)).map(({name:e})=>({name:e}))},"getBranchesAsObjArray"),Lt=d(function(){return c.records.branches},"getBranches"),Tt=d(function(){return c.records.commits},"getCommits"),_=d(function(){let e=[...c.records.commits.values()];return e.forEach(function(t){u.debug(t.id)}),e.sort((t,a)=>t.seq-a.seq),e},"getCommitsArray"),Mt=d(function(){return c.records.currBranch},"getCurrentBranch"),vt=d(function(){return c.records.direction},"getDirection"),Pt=d(function(){return c.records.head},"getHead"),Y={commitType:p,getConfig:I,setDirection:pt,setOptions:xt,getOptions:ft,commit:ut,branch:bt,merge:wt,cherryPick:Bt,checkout:U,prettyPrint:Et,clear:kt,getBranchesAsObjArray:Ct,getBranches:Lt,getCommits:Tt,getCommitsArray:_,getCurrentBranch:Mt,getDirection:vt,getHead:Pt,setAccTitle:ot,getAccTitle:it,getAccDescription:at,setAccDescription:rt,setDiagramTitle:et,getDiagramTitle:tt},Rt=d((e,t)=>{J(e,t),e.dir&&t.setDirection(e.dir);for(let a of e.statements)Gt(a,t)},"populate"),Gt=d((e,t)=>{let a={Commit:d(o=>t.commit(At(o)),"Commit"),Branch:d(o=>t.branch(It(o)),"Branch"),Merge:d(o=>t.merge(Ot(o)),"Merge"),Checkout:d(o=>t.checkout(qt(o)),"Checkout"),CherryPicking:d(o=>t.cherryPick(Ht(o)),"CherryPicking")}[e.$type];a?a(e):u.error(`Unknown statement type: ${e.$type}`)},"parseStatement"),At=d(e=>({id:e.id,msg:e.message??"",type:e.type!==void 0?p[e.type]:p.NORMAL,tags:e.tags??void 0}),"parseCommit"),It=d(e=>({name:e.name,order:e.order??0}),"parseBranch"),Ot=d(e=>({branch:e.branch,id:e.id??"",type:e.type!==void 0?p[e.type]:void 0,tags:e.tags??void 0}),"parseMerge"),qt=d(e=>e.branch,"parseCheckout"),Ht=d(e=>{var t;return{id:e.id,targetId:"",tags:((t=e.tags)==null?void 0:t.length)===0?void 0:e.tags,parent:e.parent}},"parseCherryPicking"),zt={parse:d(async e=>{let t=await Q("gitGraph",e);u.debug(t),Rt(t,Y)},"parse")},D=nt(),f=D==null?void 0:D.gitGraph,P=10,R=40,L=4,T=2,A=8,E=new Map,k=new Map,H=30,O=new Map,z=[],v=0,y="LR",St=d(()=>{E.clear(),k.clear(),O.clear(),v=0,z=[],y="LR"},"clear"),V=d(e=>{let t=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof e=="string"?e.split(/\\n|\n|<br\s*\/?>/gi):e).forEach(a=>{let o=document.createElementNS("http://www.w3.org/2000/svg","tspan");o.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),o.setAttribute("dy","1em"),o.setAttribute("x","0"),o.setAttribute("class","row"),o.textContent=a.trim(),t.appendChild(o)}),t},"drawText"),X=d(e=>{let t,a,o;return y==="BT"?(a=d((r,i)=>r<=i,"comparisonFunc"),o=1/0):(a=d((r,i)=>r>=i,"comparisonFunc"),o=0),e.forEach(r=>{var s,n;let i=y==="TB"||y=="BT"?(s=k.get(r))==null?void 0:s.y:(n=k.get(r))==null?void 0:n.x;i!==void 0&&a(i,o)&&(t=r,o=i)}),t},"findClosestParent"),Dt=d(e=>{let t="",a=1/0;return e.forEach(o=>{let r=k.get(o).y;r<=a&&(t=o,a=r)}),t||void 0},"findClosestParentBT"),Nt=d((e,t,a)=>{let o=a,r=a,i=[];e.forEach(s=>{let n=t.get(s);if(!n)throw new Error(`Commit not found for key ${s}`);n.parents.length?(o=Wt(n),r=Math.max(o,r)):i.push(n),Ft(n,o)}),o=r,i.forEach(s=>{Kt(s,o,a)}),e.forEach(s=>{let n=t.get(s);if(n!=null&&n.parents.length){let m=Dt(n.parents);o=k.get(m).y-R,o<=r&&(r=o);let $=E.get(n.branch).pos,l=o-P;k.set(n.id,{x:$,y:l})}})},"setParallelBTPos"),jt=d(e=>{var o;let t=X(e.parents.filter(r=>r!==null));if(!t)throw new Error(`Closest parent not found for commit ${e.id}`);let a=(o=k.get(t))==null?void 0:o.y;if(a===void 0)throw new Error(`Closest parent position not found for commit ${e.id}`);return a},"findClosestParentPos"),Wt=d(e=>jt(e)+R,"calculateCommitPosition"),Ft=d((e,t)=>{let a=E.get(e.branch);if(!a)throw new Error(`Branch not found for commit ${e.id}`);let o=a.pos,r=t+P;return k.set(e.id,{x:o,y:r}),{x:o,y:r}},"setCommitPosition"),Kt=d((e,t,a)=>{let o=E.get(e.branch);if(!o)throw new Error(`Branch not found for commit ${e.id}`);let r=t+a,i=o.pos;k.set(e.id,{x:i,y:r})},"setRootPosition"),Ut=d((e,t,a,o,r,i)=>{if(i===p.HIGHLIGHT)e.append("rect").attr("x",a.x-10).attr("y",a.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${r%A} ${o}-outer`),e.append("rect").attr("x",a.x-6).attr("y",a.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${r%A} ${o}-inner`);else if(i===p.CHERRY_PICK)e.append("circle").attr("cx",a.x).attr("cy",a.y).attr("r",10).attr("class",`commit ${t.id} ${o}`),e.append("circle").attr("cx",a.x-3).attr("cy",a.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${o}`),e.append("circle").attr("cx",a.x+3).attr("cy",a.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${o}`),e.append("line").attr("x1",a.x+3).attr("y1",a.y+1).attr("x2",a.x).attr("y2",a.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${o}`),e.append("line").attr("x1",a.x-3).attr("y1",a.y+1).attr("x2",a.x).attr("y2",a.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${o}`);else{let s=e.append("circle");if(s.attr("cx",a.x),s.attr("cy",a.y),s.attr("r",t.type===p.MERGE?9:10),s.attr("class",`commit ${t.id} commit${r%A}`),i===p.MERGE){let n=e.append("circle");n.attr("cx",a.x),n.attr("cy",a.y),n.attr("r",6),n.attr("class",`commit ${o} ${t.id} commit${r%A}`)}i===p.REVERSE&&e.append("path").attr("d",`M ${a.x-5},${a.y-5}L${a.x+5},${a.y+5}M${a.x-5},${a.y+5}L${a.x+5},${a.y-5}`).attr("class",`commit ${o} ${t.id} commit${r%A}`)}},"drawCommitBullet"),_t=d((e,t,a,o)=>{var r;if(t.type!==p.CHERRY_PICK&&(t.customId&&t.type===p.MERGE||t.type!==p.MERGE)&&(f!=null&&f.showCommitLabel)){let i=e.append("g"),s=i.insert("rect").attr("class","commit-label-bkg"),n=i.append("text").attr("x",o).attr("y",a.y+25).attr("class","commit-label").text(t.id),m=(r=n.node())==null?void 0:r.getBBox();if(m&&(s.attr("x",a.posWithOffset-m.width/2-T).attr("y",a.y+13.5).attr("width",m.width+2*T).attr("height",m.height+2*T),y==="TB"||y==="BT"?(s.attr("x",a.x-(m.width+4*L+5)).attr("y",a.y-12),n.attr("x",a.x-(m.width+4*L)).attr("y",a.y+m.height-12)):n.attr("x",a.posWithOffset-m.width/2),f.rotateCommitLabel))if(y==="TB"||y==="BT")n.attr("transform","rotate(-45, "+a.x+", "+a.y+")"),s.attr("transform","rotate(-45, "+a.x+", "+a.y+")");else{let $=-7.5-(m.width+10)/25*9.5,l=10+m.width/25*8.5;i.attr("transform","translate("+$+", "+l+") rotate(-45, "+o+", "+a.y+")")}}},"drawCommitLabel"),Yt=d((e,t,a,o)=>{var r;if(t.tags.length>0){let i=0,s=0,n=0,m=[];for(let $ of t.tags.reverse()){let l=e.insert("polygon"),g=e.append("circle"),h=e.append("text").attr("y",a.y-16-i).attr("class","tag-label").text($),x=(r=h.node())==null?void 0:r.getBBox();if(!x)throw new Error("Tag bbox not found");s=Math.max(s,x.width),n=Math.max(n,x.height),h.attr("x",a.posWithOffset-x.width/2),m.push({tag:h,hole:g,rect:l,yOffset:i}),i+=20}for(let{tag:$,hole:l,rect:g,yOffset:h}of m){let x=n/2,b=a.y-19.2-h;if(g.attr("class","tag-label-bkg").attr("points",`
      ${o-s/2-L/2},${b+T}  
      ${o-s/2-L/2},${b-T}
      ${a.posWithOffset-s/2-L},${b-x-T}
      ${a.posWithOffset+s/2+L},${b-x-T}
      ${a.posWithOffset+s/2+L},${b+x+T}
      ${a.posWithOffset-s/2-L},${b+x+T}`),l.attr("cy",b).attr("cx",o-s/2+L/2).attr("r",1.5).attr("class","tag-hole"),y==="TB"||y==="BT"){let w=o+h;g.attr("class","tag-label-bkg").attr("points",`
        ${a.x},${w+2}
        ${a.x},${w-2}
        ${a.x+P},${w-x-2}
        ${a.x+P+s+4},${w-x-2}
        ${a.x+P+s+4},${w+x+2}
        ${a.x+P},${w+x+2}`).attr("transform","translate(12,12) rotate(45, "+a.x+","+o+")"),l.attr("cx",a.x+L/2).attr("cy",w).attr("transform","translate(12,12) rotate(45, "+a.x+","+o+")"),$.attr("x",a.x+5).attr("y",w+3).attr("transform","translate(14,14) rotate(45, "+a.x+","+o+")")}}}},"drawCommitTags"),Vt=d(e=>{switch(e.customType??e.type){case p.NORMAL:return"commit-normal";case p.REVERSE:return"commit-reverse";case p.HIGHLIGHT:return"commit-highlight";case p.MERGE:return"commit-merge";case p.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Xt=d((e,t,a,o)=>{let r={x:0,y:0};if(e.parents.length>0){let i=X(e.parents);if(i){let s=o.get(i)??r;return t==="TB"?s.y+R:t==="BT"?(o.get(e.id)??r).y-R:s.x+R}}else return t==="TB"?H:t==="BT"?(o.get(e.id)??r).y-R:0;return 0},"calculatePosition"),Jt=d((e,t,a)=>{var s,n;let o=y==="BT"&&a?t:t+P,r=y==="TB"||y==="BT"?o:(s=E.get(e.branch))==null?void 0:s.pos,i=y==="TB"||y==="BT"?(n=E.get(e.branch))==null?void 0:n.pos:o;if(i===void 0||r===void 0)throw new Error(`Position were undefined for commit ${e.id}`);return{x:i,y:r,posWithOffset:o}},"getCommitPosition"),F=d((e,t,a)=>{if(!f)throw new Error("GitGraph config not found");let o=e.append("g").attr("class","commit-bullets"),r=e.append("g").attr("class","commit-labels"),i=y==="TB"||y==="BT"?H:0,s=[...t.keys()],n=(f==null?void 0:f.parallelCommits)??!1,m=d((l,g)=>{var b,w;let h=(b=t.get(l))==null?void 0:b.seq,x=(w=t.get(g))==null?void 0:w.seq;return h!==void 0&&x!==void 0?h-x:0},"sortKeys"),$=s.sort(m);y==="BT"&&(n&&Nt($,t,i),$=$.reverse()),$.forEach(l=>{var x;let g=t.get(l);if(!g)throw new Error(`Commit not found for key ${l}`);n&&(i=Xt(g,y,i,k));let h=Jt(g,i,n);if(a){let b=Vt(g),w=g.customType??g.type,G=((x=E.get(g.branch))==null?void 0:x.index)??0;Ut(o,g,h,b,G,w),_t(r,g,h,i),Yt(r,g,h,i)}y==="TB"||y==="BT"?k.set(g.id,{x:h.x,y:h.posWithOffset}):k.set(g.id,{x:h.posWithOffset,y:h.y}),i=y==="BT"&&n?i+R:i+R+P,i>v&&(v=i)})},"drawCommits"),Qt=d((e,t,a,o,r)=>{let i=(y==="TB"||y==="BT"?a.x<o.x:a.y<o.y)?t.branch:e.branch,s=d(m=>m.branch===i,"isOnBranchToGetCurve"),n=d(m=>m.seq>e.seq&&m.seq<t.seq,"isBetweenCommits");return[...r.values()].some(m=>n(m)&&s(m))},"shouldRerouteArrow"),q=d((e,t,a=0)=>{let o=e+Math.abs(e-t)/2;if(a>5)return o;if(z.every(i=>Math.abs(i-o)>=10))return z.push(o),o;let r=Math.abs(e-t);return q(e,t-r/5,a+1)},"findLane"),Zt=d((e,t,a,o)=>{var x,b,w,G,W;let r=k.get(t.id),i=k.get(a.id);if(r===void 0||i===void 0)throw new Error(`Commit positions not found for commits ${t.id} and ${a.id}`);let s=Qt(t,a,r,i,o),n="",m="",$=0,l=0,g=(x=E.get(a.branch))==null?void 0:x.index;a.type===p.MERGE&&t.id!==a.parents[0]&&(g=(b=E.get(t.branch))==null?void 0:b.index);let h;if(s){n="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",$=10,l=10;let M=r.y<i.y?q(r.y,i.y):q(i.y,r.y),B=r.x<i.x?q(r.x,i.x):q(i.x,r.x);y==="TB"?r.x<i.x?h=`M ${r.x} ${r.y} L ${B-$} ${r.y} ${m} ${B} ${r.y+l} L ${B} ${i.y-$} ${n} ${B+l} ${i.y} L ${i.x} ${i.y}`:(g=(w=E.get(t.branch))==null?void 0:w.index,h=`M ${r.x} ${r.y} L ${B+$} ${r.y} ${n} ${B} ${r.y+l} L ${B} ${i.y-$} ${m} ${B-l} ${i.y} L ${i.x} ${i.y}`):y==="BT"?r.x<i.x?h=`M ${r.x} ${r.y} L ${B-$} ${r.y} ${n} ${B} ${r.y-l} L ${B} ${i.y+$} ${m} ${B+l} ${i.y} L ${i.x} ${i.y}`:(g=(G=E.get(t.branch))==null?void 0:G.index,h=`M ${r.x} ${r.y} L ${B+$} ${r.y} ${m} ${B} ${r.y-l} L ${B} ${i.y+$} ${n} ${B-l} ${i.y} L ${i.x} ${i.y}`):r.y<i.y?h=`M ${r.x} ${r.y} L ${r.x} ${M-$} ${n} ${r.x+l} ${M} L ${i.x-$} ${M} ${m} ${i.x} ${M+l} L ${i.x} ${i.y}`:(g=(W=E.get(t.branch))==null?void 0:W.index,h=`M ${r.x} ${r.y} L ${r.x} ${M+$} ${m} ${r.x+l} ${M} L ${i.x-$} ${M} ${n} ${i.x} ${M-l} L ${i.x} ${i.y}`)}else n="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",$=20,l=20,y==="TB"?(r.x<i.x&&(a.type===p.MERGE&&t.id!==a.parents[0]?h=`M ${r.x} ${r.y} L ${r.x} ${i.y-$} ${n} ${r.x+l} ${i.y} L ${i.x} ${i.y}`:h=`M ${r.x} ${r.y} L ${i.x-$} ${r.y} ${m} ${i.x} ${r.y+l} L ${i.x} ${i.y}`),r.x>i.x&&(n="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",$=20,l=20,a.type===p.MERGE&&t.id!==a.parents[0]?h=`M ${r.x} ${r.y} L ${r.x} ${i.y-$} ${m} ${r.x-l} ${i.y} L ${i.x} ${i.y}`:h=`M ${r.x} ${r.y} L ${i.x+$} ${r.y} ${n} ${i.x} ${r.y+l} L ${i.x} ${i.y}`),r.x===i.x&&(h=`M ${r.x} ${r.y} L ${i.x} ${i.y}`)):y==="BT"?(r.x<i.x&&(a.type===p.MERGE&&t.id!==a.parents[0]?h=`M ${r.x} ${r.y} L ${r.x} ${i.y+$} ${m} ${r.x+l} ${i.y} L ${i.x} ${i.y}`:h=`M ${r.x} ${r.y} L ${i.x-$} ${r.y} ${n} ${i.x} ${r.y-l} L ${i.x} ${i.y}`),r.x>i.x&&(n="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",$=20,l=20,a.type===p.MERGE&&t.id!==a.parents[0]?h=`M ${r.x} ${r.y} L ${r.x} ${i.y+$} ${n} ${r.x-l} ${i.y} L ${i.x} ${i.y}`:h=`M ${r.x} ${r.y} L ${i.x-$} ${r.y} ${n} ${i.x} ${r.y-l} L ${i.x} ${i.y}`),r.x===i.x&&(h=`M ${r.x} ${r.y} L ${i.x} ${i.y}`)):(r.y<i.y&&(a.type===p.MERGE&&t.id!==a.parents[0]?h=`M ${r.x} ${r.y} L ${i.x-$} ${r.y} ${m} ${i.x} ${r.y+l} L ${i.x} ${i.y}`:h=`M ${r.x} ${r.y} L ${r.x} ${i.y-$} ${n} ${r.x+l} ${i.y} L ${i.x} ${i.y}`),r.y>i.y&&(a.type===p.MERGE&&t.id!==a.parents[0]?h=`M ${r.x} ${r.y} L ${i.x-$} ${r.y} ${n} ${i.x} ${r.y-l} L ${i.x} ${i.y}`:h=`M ${r.x} ${r.y} L ${r.x} ${i.y+$} ${m} ${r.x+l} ${i.y} L ${i.x} ${i.y}`),r.y===i.y&&(h=`M ${r.x} ${r.y} L ${i.x} ${i.y}`));if(h===void 0)throw new Error("Line definition not found");e.append("path").attr("d",h).attr("class","arrow arrow"+g%A)},"drawArrow"),te=d((e,t)=>{let a=e.append("g").attr("class","commit-arrows");[...t.keys()].forEach(o=>{let r=t.get(o);r.parents&&r.parents.length>0&&r.parents.forEach(i=>{Zt(a,t.get(i),r,t)})})},"drawArrows"),ee=d((e,t)=>{let a=e.append("g");t.forEach((o,r)=>{var x;let i=r%A,s=(x=E.get(o.name))==null?void 0:x.pos;if(s===void 0)throw new Error(`Position not found for branch ${o.name}`);let n=a.append("line");n.attr("x1",0),n.attr("y1",s),n.attr("x2",v),n.attr("y2",s),n.attr("class","branch branch"+i),y==="TB"?(n.attr("y1",H),n.attr("x1",s),n.attr("y2",v),n.attr("x2",s)):y==="BT"&&(n.attr("y1",v),n.attr("x1",s),n.attr("y2",H),n.attr("x2",s)),z.push(s);let m=o.name,$=V(m),l=a.insert("rect"),g=a.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+i);g.node().appendChild($);let h=$.getBBox();l.attr("class","branchLabelBkg label"+i).attr("rx",4).attr("ry",4).attr("x",-h.width-4-((f==null?void 0:f.rotateCommitLabel)===!0?30:0)).attr("y",-h.height/2+8).attr("width",h.width+18).attr("height",h.height+4),g.attr("transform","translate("+(-h.width-14-((f==null?void 0:f.rotateCommitLabel)===!0?30:0))+", "+(s-h.height/2-1)+")"),y==="TB"?(l.attr("x",s-h.width/2-10).attr("y",0),g.attr("transform","translate("+(s-h.width/2-5)+", 0)")):y==="BT"?(l.attr("x",s-h.width/2-10).attr("y",v),g.attr("transform","translate("+(s-h.width/2-5)+", "+v+")")):l.attr("transform","translate(-19, "+(s-h.height/2)+")")})},"drawBranches"),re=d(function(e,t,a,o,r){return E.set(e,{pos:t,index:a}),t+=50+(r?40:0)+(y==="TB"||y==="BT"?o.width/2:0),t},"setBranchPosition"),ae=d(function(e,t,a,o){if(St(),u.debug("in gitgraph renderer",e+`
`,"id:",t,a),!f)throw new Error("GitGraph config not found");let r=f.rotateCommitLabel??!1,i=o.db;O=i.getCommits();let s=i.getBranchesAsObjArray();y=i.getDirection();let n=st(`[id="${t}"]`),m=0;s.forEach(($,l)=>{var G;let g=V($.name),h=n.append("g"),x=h.insert("g").attr("class","branchLabel"),b=x.insert("g").attr("class","label branch-label");(G=b.node())==null||G.appendChild(g);let w=g.getBBox();m=re($.name,m,l,w,r),b.remove(),x.remove(),h.remove()}),F(n,O,!1),f.showBranches&&ee(n,s),te(n,O),F(n,O,!0),ct.insertTitle(n,"gitTitleText",f.titleTopMargin??0,i.getDiagramTitle()),ht(void 0,n,f.diagramPadding,f.useMaxWidth)},"draw"),ie={draw:ae},oe=d(e=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${e["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${e["git"+t]}; fill: ${e["git"+t]}; }
        .commit-highlight${t} { stroke: ${e["gitInv"+t]}; fill: ${e["gitInv"+t]}; }
        .label${t}  { fill: ${e["git"+t]}; }
        .arrow${t} { stroke: ${e["git"+t]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${e.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelColor};}
  .commit-label-bkg { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${e.tagLabelFontSize}; fill: ${e.tagLabelColor};}
  .tag-label-bkg { fill: ${e.tagLabelBackground}; stroke: ${e.tagLabelBorder}; }
  .tag-hole { fill: ${e.textColor}; }

  .commit-merge {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }
  .commit-reverse {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${e.textColor};
  }
`,"getStyles"),ne=oe,$e={parser:zt,db:Y,renderer:ie,styles:ne};export{$e as diagram};
